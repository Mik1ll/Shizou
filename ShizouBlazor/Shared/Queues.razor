@using Shizou.CommandProcessors
@using System.ComponentModel
@using ShizouData.Database
@using Microsoft.EntityFrameworkCore
@implements IDisposable

@inject IDbContextFactory<ShizouContext> ContextFactory
@inject ILogger<Queues> Logger
@inject IServiceProvider ServiceProvider

<h3>Queues</h3>
<section class="queues">
    <table class="table table-hover align-middle">
        <thead>
        <tr>
            <th scope="col">Type</th>
            <th scope="col">Message</th>
            <th scope="col">Queued</th>
            <th></th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var processor in _processors)
        {
            <tr>
                <th scope="row">@Enum.GetName(processor.QueueType)</th>
                <td class="absorbing-column">
                    @(processor.CurrentCommand?.CommandId ?? (processor.Paused ? processor.PauseReason : ""))
                </td>
                <td class="text-center">@processor.CommandsInQueue</td>
                <td>
                    @if (processor.Paused)
                    {
                        <button class="btn oi oi-media-play" @onclick="@processor.Unpause"></button>
                    }
                    else
                    {
                        <button class="btn oi oi-media-pause" @onclick="@(() => processor.Pause())"></button>
                    }
                </td>
                <td>
                    <button class="btn oi oi-x" @onclick="@(processor.ClearQueue)"></button>
                </td>
            </tr>
        }
        </tbody>
    </table>
</section>

@code {
    private readonly List<CommandProcessor> _processors = new();

    protected override void OnInitialized()
    {
        _processors.AddRange(ServiceProvider.GetServices<CommandProcessor>());
        foreach (var processor in _processors)
            processor.PropertyChanged += OnCommandChanged;
    }

    private void OnCommandChanged(object? sender, PropertyChangedEventArgs eventArgs)
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        foreach (var processor in _processors)
            processor.PropertyChanged -= OnCommandChanged;
    }

}