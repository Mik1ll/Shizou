<div class="modal fade show" aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@Title</h4>
            </div>
            @if (ChildContent is not null)
            {
                <div class="modal-body">
                    @if (DialogType == ModalDialogType.Form)
                    {
                        <EditForm id="modalForm" Model="@Model" OnValidSubmit="@ModalOk">
                            <DataAnnotationsValidator/>
                            @ChildContent
                            <ValidationSummary/>
                        </EditForm>
                    }
                    else
                    {
                        @ChildContent
                    }
                </div>
            }
            <div class="modal-footer">
                @switch (DialogType)
                {
                    case ModalDialogType.Ok:
                        <button type="button" class="btn btn-primary" @onclick=@ModalOk>OK</button>
                        break;
                    case ModalDialogType.OkCancel:
                        <button type="button" class="btn btn-secondary" @onclick="@ModalCancel">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick=@ModalOk>OK</button>
                        break;
                    case ModalDialogType.DeleteCancel:
                        <button type="button" class="btn btn-secondary" @onclick="@ModalCancel">Cancel</button>
                        <button type="button" class="btn btn-danger" @onclick=@ModalOk>Delete</button>
                        break;
                    case ModalDialogType.Form:
                        <button type="button" class="btn btn-secondary" @onclick="@ModalCancel">Cancel</button>
                        <button type="submit" form="modalForm" class="btn btn-success">Submit</button>
                        break;
                }
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public object? Model { get; set; }

    [Parameter]
    [EditorRequired]
    public ModalDialogType DialogType { get; set; }

    [Parameter]
    [EditorRequired]
    public string Title { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback<bool> OnClose { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }


    public override Task SetParametersAsync(ParameterView parameters)
    {
        parameters.SetParameterProperties(this);
        if (DialogType == ModalDialogType.Form && Model is null)
            throw new ArgumentNullException($"{nameof(ModalDisplay)} requires a {nameof(Model)} when type is {Enum.GetName(ModalDialogType.Form)}");
        return base.SetParametersAsync(parameters);
    }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }

    private Task ModalOk()
    {
        return OnClose.InvokeAsync(true);
    }

    public enum ModalDialogType
    {
        Ok,
        OkCancel,
        DeleteCancel,
        Form
    }

}