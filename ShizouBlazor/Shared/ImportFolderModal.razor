@using ShizouContracts.Dtos
@using ShizouData.Database
@using ShizouData.Models
@using AutoMapper
@using Microsoft.EntityFrameworkCore
@using Shizou.Services
@inject IMapper Mapper
@inject IDbContextFactory<ShizouContext> ContextFactory
@inject ImportService ImportService

@if (_dialogIsOpen)
{
    if (!_isDelete)
    {
        if (!_folderPickerOpen)
        {
            <ModalDisplay @ref="@_modalDisplay" Model="@_myImportFolder" Title="Add Import Folder" OnClose="@OnDialogClose" OnValidate="@OnValidate" DialogType="@ModalDisplay.ModalDialogType.Form">
                <div class="mb-3 form-floating">
                    <InputText class="form-control" id="nameInput" placeholder="Name" @bind-Value="@(_myImportFolder.Name)"></InputText>
                    <label for="nameInput">Name</label>
                </div>
                <div class="mb-3 input-group">
                    <div class="form-floating">
                        <InputText class="form-control" id="pathInput" placeholder="Path" @bind-Value="@(_myImportFolder.Path)"></InputText>
                        <label for="pathInput">Path</label>
                    </div>
                    <button type="button" class="input-group-text" @onclick="@(() => { _folderPickerOpen = true; })">Browse</button>
                </div>
                <div class="mb-3 form-check">
                    <InputCheckbox class="form-check-input" id="scanOnImportInput" @bind-Value="@(_myImportFolder.ScanOnImport)"></InputCheckbox>
                    <label class="form-check-label" for="scanOnImportInput">Scan on Import</label>
                </div>
            </ModalDisplay>
        }
        else
        {
            <FolderPickerModal @bind-FolderPath="@_myImportFolder.Path" OnFolderPickerClose="@OnFolderPickerClose"></FolderPickerModal>
        }
    }
    else
    {
        <ModalDisplay Title="@($"Delete Import Folder: {_myImportFolder.Name}")" OnClose="@OnDialogClose" DialogType="ModalDisplay.ModalDialogType.DeleteCancel"></ModalDisplay>
    }
}

@code {
    private ImportFolderDto _myImportFolder = new();
    private bool _dialogIsOpen = false;
    private bool _isDelete = false;
    private bool _folderPickerOpen = false;
    private ModalDisplay? _modalDisplay;

    [Parameter]
    public EventCallback OnClose { get; set; }

    private void OnValidate(ValidationMessageStore messageStore)
    {
        using var context = ContextFactory.CreateDbContext();
        if (context.ImportFolders.Where(i => i.Id != _myImportFolder.Id).Any(i => i.Name == _myImportFolder.Name))
            messageStore.Add(() => _myImportFolder.Name, "Import folder name must be unique");
        if (context.ImportFolders.Where(i => i.Id != _myImportFolder.Id).Any(i => i.Path == _myImportFolder.Path))
            messageStore.Add(() => _myImportFolder.Path, "Import folder path must be unique");
    }

    private void OnDialogClose(bool accepted)
    {
        if (accepted)
        {
            using var context = ContextFactory.CreateDbContext();
            var myImportFolderModel = Mapper.Map<ImportFolder>(_myImportFolder);
            if (_isDelete)
                context.ImportFolders.Remove(myImportFolderModel);
            else
            {
                if (_myImportFolder.Id == 0)
                    context.ImportFolders.Add(myImportFolderModel);
                else
                {
                    var importFolder = context.ImportFolders.Find(_myImportFolder.Id);
                    if (importFolder is not null)
                        context.Entry(importFolder).CurrentValues.SetValues(myImportFolderModel);
                }
            }
            context.SaveChanges();
        }
        _dialogIsOpen = false;
        _myImportFolder = new ImportFolderDto();
        OnClose.InvokeAsync();
    }

    public void OnFolderPickerClose()
    {
        _folderPickerOpen = false;
    }

    public void NewDialog()
    {
        _isDelete = false;
        _myImportFolder = new ImportFolderDto();
        _dialogIsOpen = true;
    }

    public void EditDialog(ImportFolder importFolder)
    {
        _isDelete = false;
        _myImportFolder = Mapper.Map<ImportFolderDto>(importFolder);
        _dialogIsOpen = true;
    }

    public void DeleteDialog(ImportFolder importFolder)
    {
        _isDelete = true;
        _myImportFolder = Mapper.Map<ImportFolderDto>(importFolder);
        _dialogIsOpen = true;
    }

}