@using ShizouContracts.Dtos
@using ShizouData.Database
@using ShizouData.Models
@using AutoMapper
@using Microsoft.EntityFrameworkCore
@using Shizou.Services
@inject IMapper Mapper
@inject IDbContextFactory<ShizouContext> ContextFactory
@inject ImportService ImportService

@if (DialogIsOpen)
{
    if (!_isDelete)
    {
        <ModalDisplay Model="@MyImportFolder" Title="Add Import Folder" OnClose="@OnDialogClose" DialogType="@ModalDisplay.ModalDialogType.Form">
            <div class="mb-3">
                <label for="nameInput">Name</label>
                <InputText class="form-control" id="nameInput" @bind-Value="@(MyImportFolder.Name)"></InputText>
            </div>
            <div class="mb-3">
                <label for="pathInput">Path</label>
                <InputText class="form-control" id="pathInput" @bind-Value="@(MyImportFolder.Path)"></InputText>
            </div>
            <div class="mb-3 form-check">
                <InputCheckbox class="form-check-input" id="scanOnImportInput" @bind-Value="@(MyImportFolder.ScanOnImport)"></InputCheckbox>
                <label class="form-check-label" for="scanOnImportInput">Scan on Import</label>
            </div>
        </ModalDisplay>
    }
    else
    {
        <ModalDisplay Title="@($"Delete Import Folder: {MyImportFolder.Name}")" OnClose="@OnDialogClose" DialogType="ModalDisplay.ModalDialogType.DeleteCancel"></ModalDisplay>
    }
}

@code {
    public ImportFolderDto MyImportFolder { get; set; } = new();

    public bool DialogIsOpen { get; set; }

    private bool _isDelete = false;

    [Parameter]
    public EventCallback OnClose { get; set; }

    private void OnDialogClose(bool accepted)
    {
        if (accepted)
        {
            using var context = ContextFactory.CreateDbContext();
            var myImportFolderModel = Mapper.Map<ImportFolder>(MyImportFolder);
            if (!_isDelete)
            {
                if (MyImportFolder.Id == 0)
                    context.ImportFolders.Add(myImportFolderModel);
                else
                {
                    var importFolder = context.ImportFolders.Find(MyImportFolder.Id);
                    if (importFolder is not null)
                        context.Entry(importFolder).CurrentValues.SetValues(myImportFolderModel);
                }
            }
            else
            {
                context.ImportFolders.Remove(myImportFolderModel);
            }
            context.SaveChanges();
        }
        DialogIsOpen = false;
        MyImportFolder = new ImportFolderDto();
        OnClose.InvokeAsync();
    }

    public void NewDialog()
    {
        _isDelete = false;
        MyImportFolder = new ImportFolderDto();
        DialogIsOpen = true;
    }

    public void EditDialog(ImportFolder importFolder)
    {
        _isDelete = false;
        MyImportFolder = Mapper.Map<ImportFolderDto>(importFolder);
        DialogIsOpen = true;
    }

    public void DeleteDialog(ImportFolder importFolder)
    {
        _isDelete = true;
        MyImportFolder = Mapper.Map<ImportFolderDto>(importFolder);
        DialogIsOpen = true;
    }

}