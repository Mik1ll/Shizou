@using System.Runtime.InteropServices
<ModalDisplay Title="Pick folder" OnClose="@OnClose" DialogType="ModalDisplay.ModalDialogType.OkCancel">
    <div class="d-flex mb-3">
        <button type="button" class="justify-content-left btn btn-primary bi bi-box-arrow-up" @onclick="@GoUp"></button>
        <input type="text" class="form-control justify-content-center" value="@Path.Combine(_pathParent, _pathChild)" disabled readonly>
    </div>
    @{
        var directories = GetSubFolders(_pathParent);
    }
    <select class="form-select" size="@Math.Min(Math.Max(directories.Length, 2), 15)" @bind="@_pathChild" @ondblclick="@GoDown">
        @foreach (var dir in directories)
        {
            var name = GetFolderName(dir);
            <option value="@name" selected=@(name == _pathChild)>@name</option>
        }
    </select>

</ModalDisplay>

@code {
    private string _pathParent = string.Empty;
    private string _pathChild = string.Empty;

    [Parameter]
    public string? FolderPath { get; set; }

    [Parameter]
    public EventCallback<string> FolderPathChanged { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback OnFolderPickerClose { get; set; }

    private string GetFolderName(string path)
    {
        return Path.GetPathRoot(path) == path ? path : Path.GetFileName(path);
    }

    private string GetFolderParent(string path)
    {
        return Path.GetDirectoryName(Path.GetFullPath(path)) ?? string.Empty;
    }

    private string[] GetSubFolders(string path)
    {
        if (_pathParent == string.Empty)
            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
                return Directory.GetLogicalDrives();
            else
                return new[] { "/" };
        return Directory.EnumerateDirectories(_pathParent, "*", new EnumerationOptions { IgnoreInaccessible = true }).ToArray();
    }

    protected override void OnInitialized()
    {
        if (string.IsNullOrWhiteSpace(FolderPath))
            _pathParent = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);
        else
        {
            _pathParent = GetFolderParent(FolderPath);
            _pathChild = GetFolderName(FolderPath);
        }
    }

    public void OnClose(bool accepted)
    {
        if (accepted)
            FolderPathChanged.InvokeAsync(Path.Combine(_pathParent, _pathChild));
        OnFolderPickerClose.InvokeAsync();
    }

    public void GoDown()
    {
        _pathParent = Path.Combine(_pathParent, _pathChild);
        _pathChild = string.Empty;
    }

    public void GoUp()
    {
        if (_pathParent == string.Empty)
            return;
        _pathChild = GetFolderName(_pathParent);
        _pathParent = GetFolderParent(_pathParent);
    }

}