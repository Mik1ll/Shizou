@using ShizouContracts.Dtos
@using ShizouData.Database
@using ShizouData.Models
@using AutoMapper
@using Microsoft.EntityFrameworkCore
@using Shizou.Services
@inject IMapper Mapper
@inject IDbContextFactory<ShizouContext> ContextFactory
@inject ImportService ImportService

<section class="import-folders">
    <h3>ImportFolders</h3>
    <table class="table table-hover">
        <thead>
        <tr>
            <th>Scan Now</th>
            <th>Name</th>
            <th>Scan On Import</th>
            <th>Edit</th>
            <th>Delete</th>
        </tr>
        </thead>
        <tbody>
        @using (var context = ContextFactory.CreateDbContext())
        {
            foreach (var importFolder in context.ImportFolders)
            {
                <tr>
                    <td>
                        <button class="btn oi oi-magnifying-glass" @onclick="@(() => ImportService.ScanImportFolder(importFolder.Id))"></button>
                    </td>
                    <td class="absorbing-column">@(importFolder.Name)</td>
                    <td>
                        @if (importFolder.ScanOnImport)
                        {
                            <i class="oi oi-circle-check"></i>
                        }
                        else
                        {
                            <i class="oi oi-circle-x"></i>
                        }
                    </td>
                    <td>
                        <button class="btn oi oi-pencil" @onclick="@(() => OpenDialog(importFolder))"></button>
                    </td>
                    <td>
                        <button class="btn oi oi-trash"></button>
                    </td>
                </tr>
            }
        }
        </tbody>
    </table>
    <button type="button" class="btn btn-primary" @onclick="@OpenDialog">Add Import Folder</button>
    @if (DialogOpen)
    {
        <ModalDisplay Model="@MyImportFolder" Title="Add Import Folder" OnClose="@OnDialogClose" DialogType="@ModalDisplay.ModalDialogType.Form">
            <div class="mb-3">
                <label for="nameInput">Name</label>
                <InputText class="form-control" id="nameInput" @bind-Value="@(MyImportFolder.Name)"></InputText>
            </div>
            <div class="mb-3">
                <label for="pathInput">Path</label>
                <InputText class="form-control" id="pathInput" @bind-Value="@(MyImportFolder.Path)"></InputText>
            </div>
            <div class="mb-3 form-check">
                <InputCheckbox class="form-check-input" id="scanOnImportInput" @bind-Value="@(MyImportFolder.ScanOnImport)"></InputCheckbox>
                <label class="form-check-label" for="scanOnImportInput">Scan on Import</label>
            </div>
        </ModalDisplay>
    }
</section>

@code {
    public ImportFolderDto MyImportFolder { get; set; } = new();

    public bool DialogOpen { get; set; }

    private void OnDialogClose(bool accepted)
    {
        if (accepted)
        {
            var myImportFolderModel = Mapper.Map<ImportFolder>(MyImportFolder);
            using var context = ContextFactory.CreateDbContext();
            if (MyImportFolder.Id == 0)
                context.ImportFolders.Add(myImportFolderModel);
            else
            {
                var importFolder = context.ImportFolders.Find(MyImportFolder.Id);
                if (importFolder is not null)
                    context.Entry(importFolder).CurrentValues.SetValues(myImportFolderModel);
            }
            context.SaveChanges();
        }
        DialogOpen = false;
        MyImportFolder = new ImportFolderDto();
        StateHasChanged();
    }

    private void OpenDialog()
    {
        DialogOpen = true;
        StateHasChanged();
    }

    private void OpenDialog(ImportFolder importFolder)
    {
        MyImportFolder = Mapper.Map<ImportFolderDto>(importFolder);
        OpenDialog();
    }

}