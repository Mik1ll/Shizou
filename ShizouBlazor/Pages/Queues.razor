@page "/Queues"
@using Shizou.Extensions
@using Shizou.CommandProcessors
@using System.Timers
@using ShizouData.Database
@using Microsoft.EntityFrameworkCore
@implements IDisposable

@inject IDbContextFactory<ShizouContext> ContextFactory
@inject ILogger<Queues> Logger
@inject IServiceProvider ServiceProvider

<h3>Queues</h3>

<table class="table">
    <thead>
    <tr>
        <th>Type</th>
        <th>Message</th>
        <th>Queued</th>
        <th></th>
        <th></th>
    </tr>
    </thead>

    <tbody>
    @foreach (var processor in _processors)
    {
        <tr>
            <td>@Enum.GetName(processor.QueueType)</td>
            <td>
                @if (processor.Paused)
                {
                    @processor.PauseReason
                }
                else
                {
                    @processor.CurrentCommand?.CommandId
                }
            </td>
            <td>@processor.CommandsInQueue</td>
            <td>
                @if (processor.Paused)
                {
                    <button class="btn" @onclick="@processor.Unpause">
                        <i class="oi oi-media-play"></i>
                    </button>
                }
                else
                {
                    <button class="btn" @onclick="@(() => processor.Pause())">
                        <i class="oi oi-media-pause"></i>
                    </button>
                }
            </td>
            <td>
                <button @onclick="@(() => ClearQueue(processor))">
                    <i class="oi oi-x"></i>
                </button>
            </td>
        </tr>
    }
    </tbody>
</table>


@code {
    private readonly List<CommandProcessor> _processors = new();
    private readonly Timer _timer = new(2_000)
    {
        AutoReset = true,
        Enabled = true
    };

    protected override void OnInitialized()
    {
        _processors.AddRange(ServiceProvider.GetServices<CommandProcessor>());
        _timer.Elapsed += (_, _) => InvokeAsync(StateHasChanged);
    }

    private void ClearQueue(CommandProcessor processor)
    {
        using var context = ContextFactory.CreateDbContext();
        context.CommandRequests.ClearQueue(processor.QueueType);
        context.SaveChanges();
        Logger.LogInformation("{queueType} queue cleared", Enum.GetName(processor.QueueType));
    }

    public void Dispose()
    {
        _timer.Dispose();
    }

}