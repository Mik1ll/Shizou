@page "/Queues"
@using Shizou.Extensions
@using Shizou.CommandProcessors
@using System.Timers
@using ShizouData.Database
@using Microsoft.EntityFrameworkCore
@implements IDisposable

@inject IDbContextFactory<ShizouContext> ContextFactory
@inject ILogger<Queues> Logger
@inject IServiceProvider ServiceProvider

<h3>Queues</h3>
<div class="container-fluid">
    <table class="table table-hover">
        <thead>
        <tr>
            <th>Type</th>
            <th>Message</th>
            <th>Queued</th>
            <th></th>
            <th></th>
        </tr>
        </thead>

        <tbody>
        @foreach (var processor in _processors)
        {
            <tr>
                <td>@Enum.GetName(processor.QueueType)</td>
                <td class="absorbing-column">
                    @if (processor.Paused)
                    {
                        @processor.PauseReason
                    }
                    else
                    {
                        @processor.CurrentCommand?.CommandId
                    }
                </td>
                <td id="queued-column">@processor.CommandsInQueue</td>
                <td>
                    @if (processor.Paused)
                    {
                        <button class="btn oi oi-media-play" @onclick="@processor.Unpause"></button>
                    }
                    else
                    {
                        <button class="btn oi oi-media-pause" @onclick="@(() => processor.Pause())"></button>
                    }
                </td>
                <td>
                    <button class="btn oi oi-x" @onclick="@(() => ClearQueue(processor))"></button>
                </td>
            </tr>
        }
        </tbody>
    </table>
</div>

@code {
    private readonly List<CommandProcessor> _processors = new();
    private readonly Timer _timer = new(2_000)
    {
        AutoReset = true,
        Enabled = true
    };

    protected override void OnInitialized()
    {
        _processors.AddRange(ServiceProvider.GetServices<CommandProcessor>());
        _timer.Elapsed += (_, _) => InvokeAsync(StateHasChanged);
    }

    private void ClearQueue(CommandProcessor processor)
    {
        using var context = ContextFactory.CreateDbContext();
        context.CommandRequests.ClearQueue(processor.QueueType);
        context.SaveChanges();
        Logger.LogInformation("{QueueType} queue cleared", Enum.GetName(processor.QueueType));
    }

    public void Dispose()
    {
        _timer.Dispose();
    }

}