// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shizou.Data.Database;

#nullable disable

namespace Shizou.Data.Migrations
{
    [DbContext(typeof(ShizouContext))]
    [Migration("20240130114143_JsonVideo")]
    partial class JsonVideo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.1");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Shizou.Data.Models.AniDbAnime", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AirDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("AniDbUpdated")
                        .HasColumnType("TEXT");

                    b.Property<int>("AnimeType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("EpisodeCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageFilename")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Restricted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TitleEngish")
                        .HasColumnType("TEXT");

                    b.Property<string>("TitleOriginal")
                        .HasColumnType("TEXT");

                    b.Property<string>("TitleTranscription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AniDbAnimes");
                });

            modelBuilder.Entity("Shizou.Data.Models.AniDbAnimeRelation", b =>
                {
                    b.Property<int>("AnimeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ToAnimeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RelationType")
                        .HasColumnType("INTEGER");

                    b.HasKey("AnimeId", "ToAnimeId", "RelationType");

                    b.ToTable("AniDbAnimeRelations");
                });

            modelBuilder.Entity("Shizou.Data.Models.AniDbEpisode", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("AirDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("AniDbAnimeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DurationMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EpisodeType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Summary")
                        .HasColumnType("TEXT");

                    b.Property<string>("TitleEnglish")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TitleOriginal")
                        .HasColumnType("TEXT");

                    b.Property<string>("TitleTranscription")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AniDbAnimeId");

                    b.ToTable("AniDbEpisodes");
                });

            modelBuilder.Entity("Shizou.Data.Models.AniDbEpisodeFileXref", b =>
                {
                    b.Property<int>("AniDbEpisodeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AniDbFileId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AniDbEpisodeId", "AniDbFileId");

                    b.HasIndex("AniDbFileId");

                    b.ToTable("AniDbEpisodeFileXrefs");
                });

            modelBuilder.Entity("Shizou.Data.Models.AniDbFile", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AniDbGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Censored")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Chaptered")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Crc")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deprecated")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DurationSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Ed2k")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FileVersion")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Md5")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sha1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AniDbGroupId");

                    b.HasIndex("Ed2k")
                        .IsUnique();

                    b.ToTable("AniDbFiles");
                });

            modelBuilder.Entity("Shizou.Data.Models.AniDbGroup", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AniDbGroups");
                });

            modelBuilder.Entity("Shizou.Data.Models.AnimeFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Criteria")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AnimeFilters");
                });

            modelBuilder.Entity("Shizou.Data.Models.CommandRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CommandArgs")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CommandId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QueueType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CommandId")
                        .IsUnique();

                    b.ToTable("CommandRequests");
                });

            modelBuilder.Entity("Shizou.Data.Models.EpisodeWatchedState", b =>
                {
                    b.Property<int>("AniDbEpisodeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AniDbFileId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MyListId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Watched")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("WatchedUpdated")
                        .HasColumnType("TEXT");

                    b.HasKey("AniDbEpisodeId");

                    b.HasIndex("MyListId");

                    b.ToTable("EpisodeWatchedStates");
                });

            modelBuilder.Entity("Shizou.Data.Models.FileWatchedState", b =>
                {
                    b.Property<int>("AniDbFileId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MyListId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Watched")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("WatchedUpdated")
                        .HasColumnType("TEXT");

                    b.HasKey("AniDbFileId");

                    b.HasIndex("MyListId");

                    b.ToTable("FileWatchedStates");
                });

            modelBuilder.Entity("Shizou.Data.Models.HangingEpisodeFileXref", b =>
                {
                    b.Property<int>("AniDbEpisodeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AniDbFileId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AniDbEpisodeId", "AniDbFileId");

                    b.HasIndex("AniDbFileId");

                    b.ToTable("HangingEpisodeFileXrefs");
                });

            modelBuilder.Entity("Shizou.Data.Models.ImportFolder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("ScanOnImport")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Path")
                        .IsUnique();

                    b.ToTable("ImportFolders");
                });

            modelBuilder.Entity("Shizou.Data.Models.LocalFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AniDbFileId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Crc")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Ed2k")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Ignored")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ImportFolderId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ManualLinkEpisodeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PathTail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Signature")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AniDbFileId")
                        .IsUnique();

                    b.HasIndex("Ed2k")
                        .IsUnique();

                    b.HasIndex("ManualLinkEpisodeId");

                    b.HasIndex("Signature")
                        .IsUnique();

                    b.HasIndex("ImportFolderId", "PathTail")
                        .IsUnique();

                    b.ToTable("LocalFiles");
                });

            modelBuilder.Entity("Shizou.Data.Models.MalAniDbXref", b =>
                {
                    b.Property<int>("MalAnimeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AniDbAnimeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MalAnimeId", "AniDbAnimeId");

                    b.HasIndex("AniDbAnimeId");

                    b.ToTable("MalAniDbXrefs");
                });

            modelBuilder.Entity("Shizou.Data.Models.MalAnime", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AnimeType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("EpisodeCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MalAnimes");
                });

            modelBuilder.Entity("Shizou.Data.Models.ScheduledCommand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CommandArgs")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CommandId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double?>("FrequencyMinutes")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("NextRunTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QueueType")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RunsLeft")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CommandId")
                        .IsUnique();

                    b.ToTable("ScheduledCommands");
                });

            modelBuilder.Entity("Shizou.Data.Models.Timer", b =>
                {
                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExtraId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("TEXT");

                    b.HasKey("Type", "ExtraId");

                    b.ToTable("Timers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shizou.Data.Models.AniDbEpisode", b =>
                {
                    b.HasOne("Shizou.Data.Models.AniDbAnime", "AniDbAnime")
                        .WithMany("AniDbEpisodes")
                        .HasForeignKey("AniDbAnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AniDbAnime");
                });

            modelBuilder.Entity("Shizou.Data.Models.AniDbEpisodeFileXref", b =>
                {
                    b.HasOne("Shizou.Data.Models.AniDbEpisode", "AniDbEpisode")
                        .WithMany("AniDbEpisodeFileXrefs")
                        .HasForeignKey("AniDbEpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shizou.Data.Models.AniDbFile", "AniDbFile")
                        .WithMany("AniDbEpisodeFileXrefs")
                        .HasForeignKey("AniDbFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AniDbEpisode");

                    b.Navigation("AniDbFile");
                });

            modelBuilder.Entity("Shizou.Data.Models.AniDbFile", b =>
                {
                    b.HasOne("Shizou.Data.Models.AniDbGroup", "AniDbGroup")
                        .WithMany("AniDbFiles")
                        .HasForeignKey("AniDbGroupId");

                    b.OwnsMany("Shizou.Data.Models.AniDbAudio", "Audio", b1 =>
                        {
                            b1.Property<int>("AniDbFileId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Bitrate")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Codec")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Language")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("AniDbFileId", "Id");

                            b1.ToTable("AniDbFiles");

                            b1.ToJson("Audio");

                            b1.WithOwner()
                                .HasForeignKey("AniDbFileId");
                        });

                    b.OwnsMany("Shizou.Data.Models.AniDbSubtitle", "Subtitles", b1 =>
                        {
                            b1.Property<int>("AniDbFileId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Language")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("AniDbFileId", "Id");

                            b1.ToTable("AniDbFiles");

                            b1.ToJson("Subtitles");

                            b1.WithOwner()
                                .HasForeignKey("AniDbFileId");
                        });

                    b.OwnsOne("Shizou.Data.Models.AniDbVideo", "Video", b1 =>
                        {
                            b1.Property<int>("AniDbFileId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("BitRate")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Codec")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<int>("ColorDepth")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Height")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Width")
                                .HasColumnType("INTEGER");

                            b1.HasKey("AniDbFileId");

                            b1.ToTable("AniDbFiles");

                            b1.ToJson("Video");

                            b1.WithOwner()
                                .HasForeignKey("AniDbFileId");
                        });

                    b.Navigation("AniDbGroup");

                    b.Navigation("Audio");

                    b.Navigation("Subtitles");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("Shizou.Data.Models.EpisodeWatchedState", b =>
                {
                    b.HasOne("Shizou.Data.Models.AniDbEpisode", "AniDbEpisode")
                        .WithOne("EpisodeWatchedState")
                        .HasForeignKey("Shizou.Data.Models.EpisodeWatchedState", "AniDbEpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AniDbEpisode");
                });

            modelBuilder.Entity("Shizou.Data.Models.FileWatchedState", b =>
                {
                    b.HasOne("Shizou.Data.Models.AniDbFile", "AniDbFile")
                        .WithOne("FileWatchedState")
                        .HasForeignKey("Shizou.Data.Models.FileWatchedState", "AniDbFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AniDbFile");
                });

            modelBuilder.Entity("Shizou.Data.Models.HangingEpisodeFileXref", b =>
                {
                    b.HasOne("Shizou.Data.Models.AniDbFile", "AniDbFile")
                        .WithMany("HangingEpisodeFileXrefs")
                        .HasForeignKey("AniDbFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AniDbFile");
                });

            modelBuilder.Entity("Shizou.Data.Models.LocalFile", b =>
                {
                    b.HasOne("Shizou.Data.Models.AniDbFile", "AniDbFile")
                        .WithOne("LocalFile")
                        .HasForeignKey("Shizou.Data.Models.LocalFile", "AniDbFileId");

                    b.HasOne("Shizou.Data.Models.ImportFolder", "ImportFolder")
                        .WithMany("LocalFiles")
                        .HasForeignKey("ImportFolderId");

                    b.HasOne("Shizou.Data.Models.AniDbEpisode", "ManualLinkEpisode")
                        .WithMany("ManualLinkLocalFiles")
                        .HasForeignKey("ManualLinkEpisodeId");

                    b.Navigation("AniDbFile");

                    b.Navigation("ImportFolder");

                    b.Navigation("ManualLinkEpisode");
                });

            modelBuilder.Entity("Shizou.Data.Models.MalAniDbXref", b =>
                {
                    b.HasOne("Shizou.Data.Models.AniDbAnime", "AniDbAnime")
                        .WithMany("MalAniDbXrefs")
                        .HasForeignKey("AniDbAnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shizou.Data.Models.MalAnime", "MalAnime")
                        .WithMany("MalAniDbXrefs")
                        .HasForeignKey("MalAnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AniDbAnime");

                    b.Navigation("MalAnime");
                });

            modelBuilder.Entity("Shizou.Data.Models.MalAnime", b =>
                {
                    b.OwnsOne("Shizou.Data.Models.MalStatus", "Status", b1 =>
                        {
                            b1.Property<int>("MalAnimeId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("State")
                                .HasColumnType("INTEGER");

                            b1.Property<DateTime>("Updated")
                                .HasColumnType("TEXT");

                            b1.Property<int>("WatchedEpisodes")
                                .HasColumnType("INTEGER");

                            b1.HasKey("MalAnimeId");

                            b1.ToTable("MalAnimes");

                            b1.WithOwner()
                                .HasForeignKey("MalAnimeId");
                        });

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Shizou.Data.Models.AniDbAnime", b =>
                {
                    b.Navigation("AniDbEpisodes");

                    b.Navigation("MalAniDbXrefs");
                });

            modelBuilder.Entity("Shizou.Data.Models.AniDbEpisode", b =>
                {
                    b.Navigation("AniDbEpisodeFileXrefs");

                    b.Navigation("EpisodeWatchedState")
                        .IsRequired();

                    b.Navigation("ManualLinkLocalFiles");
                });

            modelBuilder.Entity("Shizou.Data.Models.AniDbFile", b =>
                {
                    b.Navigation("AniDbEpisodeFileXrefs");

                    b.Navigation("FileWatchedState")
                        .IsRequired();

                    b.Navigation("HangingEpisodeFileXrefs");

                    b.Navigation("LocalFile");
                });

            modelBuilder.Entity("Shizou.Data.Models.AniDbGroup", b =>
                {
                    b.Navigation("AniDbFiles");
                });

            modelBuilder.Entity("Shizou.Data.Models.ImportFolder", b =>
                {
                    b.Navigation("LocalFiles");
                });

            modelBuilder.Entity("Shizou.Data.Models.MalAnime", b =>
                {
                    b.Navigation("MalAniDbXrefs");
                });
#pragma warning restore 612, 618
        }
    }
}
