@using Shizou.Data.Enums
@using Shizou.Data.Extensions
@using Shizou.Data.FilterCriteria
@{
    var or = Filter.Criteria;
}
<div class="p-2 pt-0 border border-info rounded">
    <div class="position-relative">
        <span class="text-info bg-body ps-1 pe-1 position-absolute" style="top:-.75rem;line-height:1rem">OR</span>
    </div>
    @foreach (var and in or.Criteria.Append(null))
    {
        <div class="mt-3 p-2 pt-0 border border-success rounded">
            <div class="position-relative">
                <span class="text-success bg-body ps-1 pe-1 position-absolute" style="top:-.75rem;line-height:1rem">AND</span>
            </div>
            @foreach (var (term, idx) in (and?.Criteria ?? []).Append(null).Select((term, idx) => (term, idx)))
            {
                <div class="border border-secondary p-2 mt-2 rounded">
                    <select class="form-select mb-1" @onchange="@(args => Update(or, and, idx, (string?)args.Value))">
                        <option value="" selected="@(term is null)">@(term is null ? "Pick a Term" : "Remove")</option>
                        @foreach (var termType in _validTermTypes.Keys)
                        {
                            <option value="@termType" selected="@(termType == term?.GetType().Name)">@(termType.TrimEnd("Criterion").UpperCaseSpaced())</option>
                        }
                    </select>
                    @if (and is not null && term is not null)
                    {
                        <EditForm Model="@term">
                            <DataAnnotationsValidator/>
                            <ValidationSummary/>

                            <div class="form-check form-check-inline mb-1">
                                <label class="form-check-label">
                                    <InputCheckbox class="form-check-input" @bind-Value="@(term.Negated)"/> Negate
                                </label>
                            </div>
                            @switch (term)
                            {
                                case AirDateCriterion airdate:
                                    <InputSelect class="form-select w-auto d-inline-block mb-1" @bind-Value="@(airdate.AirDateTermType)">
                                        @foreach (var type in Enum.GetValues<AirDateTermType>())
                                        {
                                            <option value="@type" selected="@(airdate.AirDateTermType == type)">@(type.ToString().UpperCaseSpaced())</option>
                                        }
                                    </InputSelect>
                                    <InputSelect class="form-select w-auto d-inline-block mb-1" @bind-Value="@(airdate.AirDateTermRange)">
                                        @foreach (var type in Enum.GetValues<AirDateTermRange>())
                                        {
                                            <option value="@type" selected="@(airdate.AirDateTermRange == type)">@(type.ToString().UpperCaseSpaced())</option>
                                        }
                                    </InputSelect>
                                    @if (airdate.AirDateTermRange != AirDateTermRange.Missing)
                                    {
                                        <br/>
                                        <InputNumber class="form-control d-inline-block" style="width: 5em" placeholder="Year" @bind-Value="@(airdate.Year)"/>
                                        <InputNumber class="form-control d-inline-block" style="width: 5.3em" placeholder="Month" @bind-Value="@(airdate.Month)"/>
                                        <InputNumber class="form-control d-inline-block" style="width: 4.3em" placeholder="Day" @bind-Value="@(airdate.Day)"/>
                                    }

                                    break;
                                case AnimeTypeCriterion animeType:
                                    <InputSelect class="form-select w-auto d-inline-block" @bind-Value="@(animeType.AnimeType)">
                                        @foreach (var type in Enum.GetValues<AnimeType>())
                                        {
                                            <option value="@type" selected="@(animeType.AnimeType == type)">@(type.ToString().UpperCaseSpaced())</option>
                                        }
                                    </InputSelect>
                                    break;
                                case ReleaseGroupCriterion rGroup:
                                    <LiveSearchBox GetResults="@GetReleaseGroupsAsync" PlaceholderText="@(GetReleaseGroupPlaceholder(rGroup.GroupId))"
                                                   @bind-Selected="@rGroup.GroupId">
                                    </LiveSearchBox>
                                    break;
                                case SeasonCriterion season:
                                    <InputSelect class="form-select w-auto d-inline-block" @bind-Value="@(season.Season)">
                                        @foreach (var type in Enum.GetValues<AnimeSeason>())
                                        {
                                            <option value="@type" selected="@(season.Season == type)">@(type.ToString().UpperCaseSpaced())</option>
                                        }
                                    </InputSelect>
                                    break;
                            }
                        </EditForm>
                    }
                </div>
            }
        </div>
    }
</div>
