@page "/UnidentifiedFiles"
@using Shizou.Data.Extensions
@using Shizou.Data.Models
<PageTitle>Unidentified Files</PageTitle>

<main class="container-md">
    <div class="d-flex mb-2 gap-2 align-items-center">
        <button type="button" class="btn btn-primary" @onclick="@(() => ScanFiles(_localFiles))">
            <i class="bi bi-search"></i> Scan All
        </button>
        <button type="button" class="btn btn-primary" @onclick="@(() => HashFiles(_localFiles))">
            <i class="bi bi-hash"></i> Hash All
        </button>
        <div>
            <input class="form-check-input" type="checkbox" checked="@(_includeIgnored)" @onclick="@ToggleIncludeIgnored"/> Ignored Files
        </div>
    </div>
    <div class="row">
        <div class="col overflow-auto">
            <SelectTable TValue="@LocalFile" OnChange="@OnSelectChanged" class="table table-hover">
                <tbody>
                @foreach (var (file, idx) in _localFiles.OrderByAlphaNumeric(GetFilePath).Select((file, idx) => (file, idx)))
                {
                    <SelectRow @key="@file" TValue="@LocalFile" Index="@idx" Value="@file" class="@(file.Ignored ? "ignored-file" : "")">
                        <td>@(GetFilePath(file))</td>
                    </SelectRow>
                }
                </tbody>
            </SelectTable>
        </div>
    </div>
    <div class="row sticky-bottom">
        <div class="col">
            <div class="card bg-body-secondary">
                <div class="card-body">
                    <h5 class="card-title">
                        <strong>@(_selectedFiles.Count) file@(_selectedFiles.Count == 1 ? "" : "s") selected</strong>
                    </h5>
                    @if (_selectedFiles.Count > 0)
                    {
                        <div class="d-flex gap-1">
                            <button type="button" class="btn btn-primary" @onclick="@(() => ScanFiles(_selectedFiles))">
                                <i class="bi bi-search"></i> Scan
                            </button>
                            <button type="button" class="btn btn-primary" @onclick="@(() => HashFiles(_selectedFiles))">
                                <i class="bi bi-hash"></i> Hash
                            </button>
                            <button type="button" class="btn btn-primary" @onclick="@(() => AvDumpFiles(_selectedFiles))">
                                <i class="bi bi-hash"></i> AVDump
                            </button>
                            @if (_selectedFiles.All(lf => lf.Ignored == false))
                            {
                                <button type="button" class="btn btn-primary" @onclick="@(() => SetIgnored(_selectedFiles, true))">
                                    <i class="bi bi-slash-circle"></i> Ignore
                                </button>
                            }
                            else
                            {
                                <button type="button" class="btn btn-primary" @onclick="@(() => SetIgnored(_selectedFiles, false))">
                                    <i class="bi bi-circle"></i> Unignore
                                </button>
                            }

                            <button type="button" class="btn btn-primary" @onclick="@(async () => await CreateManualLinkAsync(_selectedFiles))">
                                <i class="bi bi-link"></i> Manually Link
                            </button>
                        </div>
                    }
                    @if (_selectedFiles.Count == 1)
                    {
                        var localFile = _selectedFiles.First();
                        <ul class="list-group list-group-flush overflow-y-auto mt-2" style="max-height: 35vh">
                            <li class="list-group-item">
                                <strong>Name:</strong> @(Path.GetFileName(localFile.PathTail))
                            </li>
                            <li class="list-group-item">
                                <strong>Path:</strong> @(GetFilePath(localFile))
                            </li>
                            <li class="list-group-item">
                                <strong>Size:</strong> @(Math.Round(localFile.FileSize / (1024.0 * 1024), 2)) MiB
                            </li>
                            <li class="list-group-item">
                                <strong>Hash:</strong> @(localFile.Ed2k)
                            </li>
                            <li class="list-group-item">
                                <strong>CRC:</strong> @(localFile.Crc)
                            </li>
                            <li class="list-group-item">
                                <strong>Updated:</strong> @(localFile.Updated?.ToLocalTime())
                            </li>
                        </ul>
                    }
                </div>
            </div>
        </div>
    </div>
</main>
